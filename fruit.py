# -*- coding: utf-8 -*-
"""Fruit.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UYQiOPtd7JFPL2F0_80tJ_jixy9ZRMQT
"""

from google.colab import drive
drive.mount('/content/drive')

#!rm -rf

!unzip /content/drive/MyDrive/BI_Capstone_project.zip

from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.applications import MobileNetV2
from tensorflow.keras.layers import AveragePooling2D
from tensorflow.keras.layers import Dropout
from tensorflow.keras.layers import Flatten
from tensorflow.keras.layers import Dense
from tensorflow.keras.layers import Input
from tensorflow.keras.models import Model, load_model
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.applications.mobilenet_v2 import preprocess_input
from tensorflow.keras.preprocessing.image import img_to_array
from tensorflow.keras.preprocessing.image import load_img
from tensorflow.keras.utils import to_categorical
from sklearn.preprocessing import LabelEncoder, LabelBinarizer
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report
from tensorflow.keras.callbacks import EarlyStopping
from imutils import paths
import matplotlib.pyplot as plt
import numpy as np
import argparse
import os
import pandas as pd
import tensorflow as tf

INIT_LR = 1e-4
EPOCHS = 50
BS = 64

apples = list(paths.list_images("/content/BI_Capstone_project/Fruits/apples"))
bananas = list(paths.list_images("/content/BI_Capstone_project/Fruits/bananas"))
oranges = list(paths.list_images("/content/BI_Capstone_project/Fruits/oranges"))
data = []
labels = []

tests = list(paths.list_images("/content/BI_Capstone_project/Fruits/test"))

for apple in apples:
	# extract the class label from the filename
	label = apple.split(os.path.sep)[-2]
	# load the input image (224x224) and preprocess it
	image = load_img(apple, target_size=(224, 224))
	image = img_to_array(image)
	#image = preprocess_input(image)
	# update the data and labels lists, respectively
	data.append(image)
	labels.append(label)

for banana in bananas:
	# extract the class label from the filename
	label = banana.split(os.path.sep)[-2]
	# load the input image (224x224) and preprocess it
	image = load_img(banana, target_size=(224, 224))
	image = img_to_array(image)
	#image = preprocess_input(image)
	# update the data and labels lists, respectively
	data.append(image)
	labels.append(label)

for orange in oranges:
	# extract the class label from the filename
	label = orange.split(os.path.sep)[-2]
	# load the input image (224x224) and preprocess it
	image = load_img(orange, target_size=(224, 224))
	image = img_to_array(image)
	#image = preprocess_input(image)
	# update the data and labels lists, respectively
	data.append(image)
	labels.append(label)

data = np.array(data, dtype="float32")
labels = np.array(labels)

lb = LabelEncoder()
labels = lb.fit_transform(labels)
labels = to_categorical(labels)

(trainX, testX, trainY, testY) = train_test_split(data, labels,
    test_size=0.20, stratify=labels, random_state=42, shuffle=True)

trainX.shape[0], testX.shape[0]

trainY.shape, testY.shape

#aug = ImageDataGenerator(
#	rotation_range=20,
#	zoom_range=0.15,
#	width_shift_range=0.2,
#	height_shift_range=0.2,
#	shear_range=0.15,
#	horizontal_flip=True,
#	fill_mode="nearest")

baseModel = MobileNetV2(weights="imagenet", include_top=False,
	input_shape=(224, 224, 3))

headModel = baseModel.output
headModel = AveragePooling2D(pool_size=(7, 7))(headModel)
headModel = Flatten(name="flatten")(headModel)
headModel = Dense(128, activation="relu")(headModel)
headModel = Dropout(0.5)(headModel)
headModel = Dense(3, activation="softmax")(headModel)

Fruit_identification_model = Model(inputs=baseModel.input, outputs=headModel)

Fruit_identification_model.summary()

for layer in baseModel.layers:
	layer.trainable = False

opt = Adam(learning_rate=INIT_LR, decay=INIT_LR / EPOCHS)
Fruit_identification_model.compile(loss="categorical_crossentropy", optimizer=opt,
	metrics=["accuracy"])

!rm -rf /content/20210721-053512

import datetime
log_dir = "/content/" + datetime.datetime.now().strftime("%Y%m%d-%H%M%S")
tensorboard_callback = tf.keras.callbacks.TensorBoard(log_dir=log_dir,histogram_freq=1, write_graph=True)
callback_list=[tensorboard_callback]

es = EarlyStopping(monitor='val_loss', mode='min', verbose=1, patience=5)

checkpoint_path = "train_ckpt/cp.ckpt"
cp_callback = tf.keras.callbacks.ModelCheckpoint(filepath=checkpoint_path,save_best_only=True, save_weights_only=True, verbose=1)

H = Fruit_identification_model.fit(
	trainX, trainY,batch_size=BS,
	steps_per_epoch=len(trainX) // BS,
	validation_data=(testX, testY),
	validation_steps=len(testX) // BS,
	epochs=EPOCHS,callbacks=[callback_list,es,cp_callback])

# Commented out IPython magic to ensure Python compatibility.
# %load_ext tensorboard

# Commented out IPython magic to ensure Python compatibility.
# %tensorboard --logdir /content/20210806-053516

predIdxs = Fruit_identification_model.predict(testX, batch_size=BS)

from sklearn.metrics import confusion_matrix
confusion_matrix(testY.argmax(axis=1), predIdxs.round().argmax(axis=1))

print(classification_report(testY.argmax(axis=1), predIdxs.round().argmax(axis=1), target_names = ['apples', 'bananas', 'oranges']))

for i in range(len(tests)):
  test_1_load = load_img(tests[i], target_size=(224,224))
  plt.imshow(test_1_load)
  plt.show()
  test_1_load = img_to_array(test_1_load)
  test_1_load = np.reshape(test_1_load,[1,224,224,3])
  pred_1 = Fruit_identification_model.predict(test_1_load)
  apple  = round(pred_1[0][0])
  banana = round(pred_1[0][1])
  orange = round(pred_1[0][2])
  if apple == 1:
    prediction = 'Apples'
  elif banana == 1:
    prediction = 'Bananas'
  elif orange ==1:
    prediction = 'Oranges'
  print(prediction)

Fruit_identification_model.save('/content/drive/MyDrive/Fruits_models/Fruits_identification')

apples_raw = list(paths.list_images("/content/BI_Capstone_project/Raw_or_Ripe/apples/raw_apple"))
apples_ripe = list(paths.list_images("/content/BI_Capstone_project/Raw_or_Ripe/apples/ripe_apple"))
data_apple = []
labels_apple = []

for apple in apples_raw:
	# extract the class label from the filename
	label_apple = apple.split(os.path.sep)[-2]
	# load the input image (224x224) and preprocess it
	image = load_img(apple, target_size=(224, 224))
	image = img_to_array(image)
	image = preprocess_input(image)
	# update the data and labels lists, respectively
	data_apple.append(image)
	labels_apple.append(label_apple)

for apple in apples_ripe:
	# extract the class label from the filename
	label_apple = apple.split(os.path.sep)[-2]
	# load the input image (224x224) and preprocess it
	image = load_img(apple, target_size=(224, 224))
	image = img_to_array(image)
	image = preprocess_input(image)
	# update the data and labels lists, respectively
	data_apple.append(image)
	labels_apple.append(label_apple)

data_apple = np.array(data_apple, dtype="float32")
labels_apple = np.array(labels_apple)

lb = LabelBinarizer()
labels_apple = lb.fit_transform(labels_apple)
labels_apple = to_categorical(labels_apple)

(trainx_apple, testx_apple, trainy_apple, testy_apple) = train_test_split(data_apple, labels_apple,
    test_size=0.20, stratify=labels_apple, random_state=42, shuffle=True)

baseModel = MobileNetV2(weights="imagenet", include_top=False,
	input_shape=(224, 224, 3))

headModel = baseModel.output
headModel = AveragePooling2D(pool_size=(7, 7))(headModel)
headModel = Flatten(name="flatten")(headModel)
headModel = Dense(128, activation="relu")(headModel)
headModel = Dropout(0.5)(headModel)
headModel = Dense(2, activation="softmax")(headModel)

raw_or_ripe_apple = Model(inputs=baseModel.input, outputs=headModel)

for layer in baseModel.layers:
	layer.trainable = False

aug = ImageDataGenerator(
	rotation_range=20,
	zoom_range=0.15,
	width_shift_range=0.2,
	height_shift_range=0.2,
	shear_range=0.15,
	horizontal_flip=True,
	fill_mode="nearest")

opt = Adam(learning_rate=INIT_LR, decay=INIT_LR / EPOCHS)
raw_or_ripe_apple.compile(loss="binary_crossentropy", optimizer=opt,
	metrics=["accuracy"])

import datetime
log_dir = "/content/" + datetime.datetime.now().strftime("%Y%m%d-%H%M%S")
tensorboard_callback = tf.keras.callbacks.TensorBoard(log_dir=log_dir,histogram_freq=1, write_graph=True)
callback_list=[tensorboard_callback]

es = EarlyStopping(monitor='val_loss', mode='min', verbose=1, patience=5)

checkpoint_path = "train_ckpt/cp.ckpt"
cp_callback = tf.keras.callbacks.ModelCheckpoint(filepath=checkpoint_path,save_best_only=True, save_weights_only=True, verbose=1)

H_1 = raw_or_ripe_apple.fit(
    aug.flow(trainx_apple, trainy_apple, batch_size=16),
	validation_data=(testx_apple, testy_apple),
	epochs=14,callbacks=[callback_list,es,cp_callback])

# Commented out IPython magic to ensure Python compatibility.
# %tensorboard --logdir /content/20210818-063124

predIdxs_apple = raw_or_ripe_apple.predict(testx_apple, batch_size=BS)

print(classification_report(testy_apple.argmax(axis=1), predIdxs_apple.round().argmax(axis=1), target_names = ['Raw_apple', 'Ripe_apple']))

from sklearn.metrics import confusion_matrix
print(confusion_matrix(testy_apple.argmax(axis=1), predIdxs_apple.round().argmax(axis=1)))

tests = list(paths.list_images("/content/BI_Capstone_project/Raw_or_Ripe/apples/test"))

for i in range(len(tests)):
  test_1_load = load_img(tests[i], target_size=(224,224))
  plt.imshow(test_1_load)
  plt.show()
  test_1_load = img_to_array(test_1_load)
  test_1_load = np.reshape(test_1_load,[1,224,224,3])
  pred_1 = raw_or_ripe_apple.predict(test_1_load)
  print(pred_1)
  raw_apple  = round(pred_1[0][0])
  ripe_apple = round(pred_1[0][1])
  if raw_apple == 1:
    prediction = 'Raw Apple'
  elif ripe_apple == 1:
    prediction = 'Ripe Apple'
  print(prediction)

raw_or_ripe_apple.save('/content/drive/MyDrive/Fruits_models/Raw_or_Ripe_apple')

bananas_raw = list(paths.list_images("/content/BI_Capstone_project/Raw_or_Ripe/bananas/raw_banana"))
bananas_ripe = list(paths.list_images("/content/BI_Capstone_project/Raw_or_Ripe/bananas/ripe_banana"))
data_bananas = []
labels_bananas = []

for banana in bananas_raw:
	# extract the class label from the filename
	label = banana.split(os.path.sep)[-2]
	# load the input image (224x224) and preprocess it
	image = load_img(banana, target_size=(224, 224))
	image = img_to_array(image)
	#image = preprocess_input(image)
	# update the data and labels lists, respectively
	data_bananas.append(image)
	labels_bananas.append(label)

for banana in bananas_ripe:
	# extract the class label from the filename
	label = banana.split(os.path.sep)[-2]
	# load the input image (224x224) and preprocess it
	image = load_img(banana, target_size=(224, 224))
	image = img_to_array(image)
	#image = preprocess_input(image)
	# update the data and labels lists, respectively
	data_bananas.append(image)
	labels_bananas.append(label)

data_bananas = np.array(data_bananas, dtype="float32")
labels_bananas = np.array(labels_bananas)

labels_bananas = lb.fit_transform(labels_bananas)
labels_bananas = to_categorical(labels_bananas)

(trainx_banana, testx_banana, trainy_banana, testy_banana) = train_test_split(data_bananas, labels_bananas,
    test_size=0.20, stratify=labels_bananas, random_state=42, shuffle=True)

baseModel = MobileNetV2(weights="imagenet", include_top=False,
	input_shape=(224, 224, 3))
headModel = baseModel.output
headModel = AveragePooling2D(pool_size=(7, 7))(headModel)
headModel = Flatten(name="flatten")(headModel)
headModel = Dense(128, activation="relu")(headModel)
headModel = Dropout(0.5)(headModel)
headModel = Dense(2, activation="softmax")(headModel)

raw_or_ripe_bananas = Model(inputs=baseModel.input, outputs=headModel)

for layer in baseModel.layers:
	layer.trainable = False

opt = Adam(learning_rate=INIT_LR, decay=INIT_LR / EPOCHS)
raw_or_ripe_bananas.compile(loss="binary_crossentropy", optimizer=opt,
	metrics=["accuracy"])

import datetime
log_dir = "/content/" + datetime.datetime.now().strftime("%Y%m%d-%H%M%S")
tensorboard_callback = tf.keras.callbacks.TensorBoard(log_dir=log_dir,histogram_freq=1, write_graph=True)
callback_list=[tensorboard_callback]

es = EarlyStopping(monitor='val_loss', mode='min', verbose=1, patience=5)

checkpoint_path = "train_ckpt/cp.ckpt"
cp_callback = tf.keras.callbacks.ModelCheckpoint(filepath=checkpoint_path,save_best_only=True, save_weights_only=True, verbose=1)

H_2 = raw_or_ripe_bananas.fit(
	aug.flow(trainx_banana, trainy_banana, batch_size=BS),
	validation_data=(testx_banana, testy_banana),
	epochs=EPOCHS,callbacks=[callback_list,es,cp_callback])

!rm -rf /content/20210806-094435

# Commented out IPython magic to ensure Python compatibility.
# %tensorboard --logdir /content/20210806-094730

predIdxs_banana = raw_or_ripe_bananas.predict(testx_banana, batch_size=BS)

print(classification_report(testy_banana.argmax(axis=1), predIdxs_banana.round().argmax(axis=1), target_names = ['Raw_banana', 'Ripe_banana']))

print(confusion_matrix(testy_banana.argmax(axis=1), predIdxs_banana.round().argmax(axis=1)))

tests = list(paths.list_images("/content/BI_Capstone_project/Raw_or_Ripe/bananas/test"))

for i in range(len(tests)):
  test_1_load = load_img(tests[i], target_size=(224,224))
  plt.imshow(test_1_load)
  plt.show()
  test_1_load = img_to_array(test_1_load)
  test_1_load = np.reshape(test_1_load,[1,224,224,3])
  pred_1 = raw_or_ripe_bananas.predict(test_1_load)
  raw_banana  = round(pred_1[0][0])
  ripe_banana = round(pred_1[0][1])
  if raw_banana == 1:
    prediction = 'Raw Banana'
  elif ripe_banana == 1:
    prediction = 'Ripe Banana'
  print(prediction)

raw_or_ripe_bananas.save('/content/drive/MyDrive/Fruits_models/Raw_or_Ripe_banana')

oranges_raw = list(paths.list_images("/content/BI_Capstone_project/Raw_or_Ripe/oranges/raw_orange"))
oranges_ripe = list(paths.list_images("/content/BI_Capstone_project/Raw_or_Ripe/oranges/ripe_orange"))
data_oranges = [] 
labels_oranges = []

for orange in oranges_raw:
	# extract the class label from the filename
	label = orange.split(os.path.sep)[-2]
	# load the input image (224x224) and preprocess it
	image = load_img(orange, target_size=(224, 224))
	image = img_to_array(image)
	#image = preprocess_input(image)
	# update the data and labels lists, respectively
	data_oranges.append(image)
	labels_oranges.append(label)

for orange in oranges_ripe:
	# extract the class label from the filename
	label = orange.split(os.path.sep)[-2]
	# load the input image (224x224) and preprocess it
	image = load_img(orange, target_size=(224, 224))
	image = img_to_array(image)
	#image = preprocess_input(image)
	# update the data and labels lists, respectively
	data_oranges.append(image)
	labels_oranges.append(label)

data_oranges = np.array(data_oranges, dtype="float32")
labels_oranges = np.array(labels_oranges)

labels_oranges = lb.fit_transform(labels_oranges)
labels_oranges = to_categorical(labels_oranges)

(trainx_oranges, testx_oranges, trainy_oranges, testy_oranges) = train_test_split(data_oranges, labels_oranges,
    test_size=0.20, stratify=labels_oranges, random_state=42, shuffle=True)

baseModel = MobileNetV2(weights="imagenet", include_top=False,
	input_shape=(224, 224, 3))
headModel = baseModel.output
headModel = AveragePooling2D(pool_size=(7, 7))(headModel)
headModel = Flatten(name="flatten")(headModel)
headModel = Dense(128, activation="relu")(headModel)
headModel = Dropout(0.5)(headModel)
headModel = Dense(2, activation="softmax")(headModel)

raw_or_ripe_oranges = Model(inputs=baseModel.input, outputs=headModel)

for layer in baseModel.layers:
	layer.trainable = False

opt = Adam(learning_rate=INIT_LR, decay=INIT_LR / EPOCHS)
raw_or_ripe_oranges.compile(loss="binary_crossentropy", optimizer=opt,
	metrics=["accuracy"])

import datetime
log_dir = "/content/" + datetime.datetime.now().strftime("%Y%m%d-%H%M%S")
tensorboard_callback = tf.keras.callbacks.TensorBoard(log_dir=log_dir,histogram_freq=1, write_graph=True)
callback_list=[tensorboard_callback]

es = EarlyStopping(monitor='val_loss', mode='min', verbose=1, patience=5)

checkpoint_path = "train_ckpt/cp.ckpt"
cp_callback = tf.keras.callbacks.ModelCheckpoint(filepath=checkpoint_path,save_best_only=True, save_weights_only=True, verbose=1)

H_3 = raw_or_ripe_oranges.fit(
	aug.flow(trainx_oranges, trainy_oranges, batch_size=BS),
	validation_data=(testx_oranges, testy_oranges),
	epochs=EPOCHS,callbacks=[callback_list,es,cp_callback])

# Commented out IPython magic to ensure Python compatibility.
# %tensorboard --logdir /content/20210806-100310

predIdxs_oranges = raw_or_ripe_oranges.predict(testx_oranges, batch_size=BS)

print(classification_report(testy_oranges.argmax(axis=1), predIdxs_oranges.round().argmax(axis=1), target_names = ['Raw_oranges', 'Ripe_oranges']))

print(confusion_matrix(testy_oranges.argmax(axis=1), predIdxs_oranges.round().argmax(axis=1)))

tests = list(paths.list_images("/content/BI_Capstone_project/Raw_or_Ripe/oranges/test"))

for i in range(len(tests)):
  test_1_load = load_img(tests[i], target_size=(224,224))
  plt.imshow(test_1_load)
  plt.show()
  test_1_load = img_to_array(test_1_load)
  test_1_load = np.reshape(test_1_load,[1,224,224,3])
  pred_1 = raw_or_ripe_oranges.predict(test_1_load)
  raw_oranges  = round(pred_1[0][0])
  ripe_oranges = round(pred_1[0][1])
  if raw_oranges == 1:
    prediction = 'Raw oranges'
  elif ripe_oranges == 1:
    prediction = 'Ripe oranges'
  print(prediction)

raw_or_ripe_oranges.save('/content/drive/MyDrive/Fruits_models/Raw_or_Ripe_oranges')

diseased_apple = list(paths.list_images("/content/BI_Capstone_project/Fresh_or_Diseased/apples/diseased_apple"))
fresh_apple = list(paths.list_images("/content/BI_Capstone_project/Fresh_or_Diseased/apples/fresh_apples"))
data = []
labels = []

for apple in diseased_apple:
	# extract the class label from the filename
	label = apple.split(os.path.sep)[-2]
	# load the input image (224x224) and preprocess it
	image = load_img(apple, target_size=(224, 224))
	image = img_to_array(image)
	#image = preprocess_input(image)
	# update the data and labels lists, respectively
	data.append(image)
	labels.append(label)

for apple in fresh_apple:
	# extract the class label from the filename
	label = apple.split(os.path.sep)[-2]
	# load the input image (224x224) and preprocess it
	image = load_img(apple, target_size=(224, 224))
	image = img_to_array(image)
	#image = preprocess_input(image)
	# update the data and labels lists, respectively
	data.append(image)
	labels.append(label)

data = np.array(data, dtype="float32")
labels = np.array(labels)

labels = lb.fit_transform(labels)
labels = to_categorical(labels)

(trainX, testX, trainY, testY) = train_test_split(data, labels,
    test_size=0.20, stratify=labels, random_state=42, shuffle=True)

baseModel = MobileNetV2(weights="imagenet", include_top=False,
	input_shape=(224, 224, 3))

headModel = baseModel.output
headModel = AveragePooling2D(pool_size=(7, 7))(headModel)
headModel = Flatten(name="flatten")(headModel)
headModel = Dense(128, activation="relu")(headModel)
headModel = Dropout(0.5)(headModel)
headModel = Dense(2, activation="softmax")(headModel)

fresh_or_diseased_apple = Model(inputs=baseModel.input, outputs=headModel)

for layer in baseModel.layers:
	layer.trainable = False

opt = Adam(learning_rate=INIT_LR, decay=INIT_LR / EPOCHS)
fresh_or_diseased_apple.compile(loss="binary_crossentropy", optimizer=opt,
	metrics=["accuracy"])

import datetime
log_dir = "/content/" + datetime.datetime.now().strftime("%Y%m%d-%H%M%S")
tensorboard_callback = tf.keras.callbacks.TensorBoard(log_dir=log_dir,histogram_freq=1, write_graph=True)
callback_list=[tensorboard_callback]

es = EarlyStopping(monitor='val_loss', mode='min', verbose=1, patience=5)

checkpoint_path = "train_ckpt/cp.ckpt"
cp_callback = tf.keras.callbacks.ModelCheckpoint(filepath=checkpoint_path,save_best_only=True, save_weights_only=True, verbose=1)

H_1 = fresh_or_diseased_apple.fit(
    aug.flow(trainX, trainY, batch_size=BS),
	validation_data=(testX, testY),
	epochs=150,callbacks=[callback_list,es,cp_callback])

# Commented out IPython magic to ensure Python compatibility.
# %tensorboard --logdir /content/20210806-104814

predIdxs_apple = fresh_or_diseased_apple.predict(testX, batch_size=BS)

print(classification_report(testY.argmax(axis=1), predIdxs_apple.round().argmax(axis=1), target_names = ['Fresh_apple', 'Diseased_apple']))

print(confusion_matrix(testY.argmax(axis=1), predIdxs_apple.round().argmax(axis=1)))

tests = list(paths.list_images("/content/BI_Capstone_project/Fresh_or_Diseased/apples/test"))

for i in range(len(tests)):
  test_1_load = load_img(tests[i], target_size=(224,224))
  plt.imshow(test_1_load)
  plt.show()
  test_1_load = img_to_array(test_1_load)
  test_1_load = np.reshape(test_1_load,[1,224,224,3])
  pred_1 = fresh_or_diseased_apple.predict(test_1_load)
  fresh_apple  = round(pred_1[0][0])
  diseased_apple = round(pred_1[0][1])
  if fresh_apple == 1:
    prediction = 'Diseased Apple'
  elif diseased_apple == 1:
    prediction = 'Fresh Apple'
  print(prediction)

fresh_or_diseased_apple.save('/content/drive/MyDrive/Fruits_models/Ripe_or_Diseased_apple')

diseased_banana = list(paths.list_images("/content/BI_Capstone_project/Fresh_or_Diseased/bananas/diseased_banana"))
fresh_banana = list(paths.list_images("/content/BI_Capstone_project/Fresh_or_Diseased/bananas/fresh_banana"))
data = []
labels = []

for banana in diseased_banana:
	# extract the class label from the filename
	label = banana.split(os.path.sep)[-2]
	# load the input image (224x224) and preprocess it
	image = load_img(banana, target_size=(224, 224))
	image = img_to_array(image)
	#image = preprocess_input(image)
	# update the data and labels lists, respectively
	data.append(image)
	labels.append(label)

for banana in fresh_banana:
	# extract the class label from the filename
	label = banana.split(os.path.sep)[-2]
	# load the input image (224x224) and preprocess it
	image = load_img(banana, target_size=(224, 224))
	image = img_to_array(image)
	#image = preprocess_input(image)
	# update the data and labels lists, respectively
	data.append(image)
	labels.append(label)

data = np.array(data, dtype="float32")
labels = np.array(labels)

lb = LabelBinarizer()
labels = lb.fit_transform(labels)
labels = to_categorical(labels)

(trainX, testX, trainY, testY) = train_test_split(data, labels,
    test_size=0.20, stratify=labels, random_state=42, shuffle=True)

baseModel = MobileNetV2(weights="imagenet", include_top=False,
	input_shape=(224, 224, 3))

headModel = baseModel.output
headModel = AveragePooling2D(pool_size=(7, 7))(headModel)
headModel = Flatten(name="flatten")(headModel)
headModel = Dense(128, activation="relu")(headModel)
headModel = Dropout(0.5)(headModel)
headModel = Dense(2, activation="softmax")(headModel)

fresh_or_diseased_banana = Model(inputs=baseModel.input, outputs=headModel)

for layer in baseModel.layers:
	layer.trainable = False

opt = Adam(learning_rate=INIT_LR, decay=INIT_LR / EPOCHS)
fresh_or_diseased_banana.compile(loss="binary_crossentropy", optimizer=opt,
	metrics=["accuracy"])

import datetime
log_dir = "/content/" + datetime.datetime.now().strftime("%Y%m%d-%H%M%S")
tensorboard_callback = tf.keras.callbacks.TensorBoard(log_dir=log_dir,histogram_freq=1, write_graph=True)
callback_list=[tensorboard_callback]

es = EarlyStopping(monitor='val_loss', mode='min', verbose=1, patience=5)

checkpoint_path = "train_ckpt/cp.ckpt"
cp_callback = tf.keras.callbacks.ModelCheckpoint(filepath=checkpoint_path,save_best_only=True, save_weights_only=True, verbose=1)

H_1 = fresh_or_diseased_banana.fit(
    aug.flow(trainX, trainY, batch_size=BS),
	validation_data=(testX, testY),
	epochs=50,callbacks=[callback_list,es,cp_callback])

# Commented out IPython magic to ensure Python compatibility.
# %tensorboard --logdir /content/20210807-050305

predIdxs_apple = fresh_or_diseased_banana.predict(testX, batch_size=BS)

print(classification_report(testY.argmax(axis=1), predIdxs_apple.round().argmax(axis=1), target_names = ['Fresh_banana', 'Diseased_banana']))

from sklearn.metrics import confusion_matrix
print(confusion_matrix(testY.argmax(axis=1), predIdxs_apple.round().argmax(axis=1)))

tests = list(paths.list_images("/content/BI_Capstone_project/Fresh_or_Diseased/bananas/test"))

for i in range(len(tests)):
  test_1_load = load_img(tests[i], target_size=(224,224))
  plt.imshow(test_1_load)
  plt.show()
  test_1_load = img_to_array(test_1_load)
  test_1_load = np.reshape(test_1_load,[1,224,224,3])
  pred_1 = fresh_or_diseased_banana.predict(test_1_load)
  fresh_banana  = round(pred_1[0][0])
  diseased_banana = round(pred_1[0][1])
  if fresh_banana == 1:
    prediction = 'Diseased Banana'
  elif diseased_banana == 1:
    prediction = 'Fresh Banana'
  print(prediction)

fresh_or_diseased_banana.save('/content/drive/MyDrive/Fruits_models/Ripe_or_Diseased_banana')

oranges_diseased = list(paths.list_images("/content/BI_Capstone_project/Fresh_or_Diseased/oranges/diseased_oranges"))
oranges_fresh = list(paths.list_images("/content/BI_Capstone_project/Fresh_or_Diseased/oranges/fresh_oranges"))
data_oranges = [] 
labels_oranges = []

for orange in oranges_diseased:
	# extract the class label from the filename
	label = orange.split(os.path.sep)[-2]
	# load the input image (224x224) and preprocess it
	image = load_img(orange, target_size=(224, 224))
	image = img_to_array(image)
	#image = preprocess_input(image)
	# update the data and labels lists, respectively
	data_oranges.append(image)
	labels_oranges.append(label)

for orange in oranges_fresh:
	# extract the class label from the filename
	label = orange.split(os.path.sep)[-2]
	# load the input image (224x224) and preprocess it
	image = load_img(orange, target_size=(224, 224))
	image = img_to_array(image)
	#image = preprocess_input(image)
	# update the data and labels lists, respectively
	data_oranges.append(image)
	labels_oranges.append(label)

data_oranges = np.array(data_oranges, dtype="float32")
labels_oranges = np.array(labels_oranges)

lb = LabelBinarizer()
labels_oranges = lb.fit_transform(labels_oranges)
labels_oranges = to_categorical(labels_oranges)

(trainx_oranges, testx_oranges, trainy_oranges, testy_oranges) = train_test_split(data_oranges, labels_oranges,
    test_size=0.20, stratify=labels_oranges, random_state=42, shuffle=True)

baseModel = MobileNetV2(weights="imagenet", include_top=False,
	input_shape=(224, 224, 3))
headModel = baseModel.output
headModel = AveragePooling2D(pool_size=(7, 7))(headModel)
headModel = Flatten(name="flatten")(headModel)
headModel = Dense(128, activation="relu")(headModel)
headModel = Dropout(0.5)(headModel)
headModel = Dense(2, activation="softmax")(headModel)

fresh_or_diseased_oranges = Model(inputs=baseModel.input, outputs=headModel)

for layer in baseModel.layers:
	layer.trainable = False

opt = Adam(learning_rate=INIT_LR, decay=INIT_LR / EPOCHS)
fresh_or_diseased_oranges.compile(loss="binary_crossentropy", optimizer=opt,
	metrics=["accuracy"])

import datetime
log_dir = "/content/" + datetime.datetime.now().strftime("%Y%m%d-%H%M%S")
tensorboard_callback = tf.keras.callbacks.TensorBoard(log_dir=log_dir,histogram_freq=1, write_graph=True)
callback_list=[tensorboard_callback]

es = EarlyStopping(monitor='val_loss', mode='min', verbose=1, patience=5)

checkpoint_path = "train_ckpt/cp.ckpt"
cp_callback = tf.keras.callbacks.ModelCheckpoint(filepath=checkpoint_path,save_best_only=True, save_weights_only=True, verbose=1)

H_3 = fresh_or_diseased_oranges.fit(
	aug.flow(trainx_oranges, trainy_oranges, batch_size=BS),
	validation_data=(testx_oranges, testy_oranges),
	epochs=EPOCHS,callbacks=[callback_list,es,cp_callback])

# Commented out IPython magic to ensure Python compatibility.
# %tensorboard --logdir /content/20210807-123329

predIdxs_oranges = fresh_or_diseased_oranges.predict(testx_oranges, batch_size=BS)

print(classification_report(testy_oranges.argmax(axis=1), predIdxs_oranges.round().argmax(axis=1), target_names = ['Fresh_oranges', 'Diseased_oranges']))

from sklearn.metrics import confusion_matrix
print(confusion_matrix(testy_oranges.argmax(axis=1), predIdxs_oranges.round().argmax(axis=1)))

tests = list(paths.list_images("/content/BI_Capstone_project/Fresh_or_Diseased/oranges/test"))

for i in range(len(tests)):
  test_1_load = load_img(tests[i], target_size=(224,224))
  plt.imshow(test_1_load)
  plt.show()
  test_1_load = img_to_array(test_1_load)
  test_1_load = np.reshape(test_1_load,[1,224,224,3])
  pred_1 = fresh_or_diseased_oranges.predict(test_1_load)
  diseased_oranges  = round(pred_1[0][0])
  fresh_oranges = round(pred_1[0][1])
  if diseased_oranges == 1:
    prediction = 'Diseased oranges'
  elif fresh_oranges == 1:
    prediction = 'Fresh oranges'
  print(prediction)

fresh_or_diseased_oranges.save('/content/drive/MyDrive/Fruits_models/Ripe_orDiseased_orange')

fruit_identification = load_model('/content/drive/MyDrive/Fruits_models/Fruits_identification')
raw_or_ripe_apple = load_model('/content/drive/MyDrive/Fruits_models/Raw_or_Ripe_apple')
raw_or_ripe_banana = load_model('/content/drive/MyDrive/Fruits_models/Raw_or_Ripe_banana') 
raw_or_ripe_orange = load_model('/content/drive/MyDrive/Fruits_models/Raw_or_Ripe_oranges')
fresh_or_diseased_apple = load_model('/content/drive/MyDrive/Fruits_models/Ripe_or_Diseased_apple')
fresh_or_diseased_banana = load_model('/content/drive/MyDrive/Fruits_models/Ripe_or_Diseased_banana')
fresh_or_diseased_orange = load_model('/content/drive/MyDrive/Fruits_models/Ripe_or_Diseased_orange')

def predict_fruit(path):
  image = load_img(path, target_size=(224, 224))
  plt.imshow(image)
  plt.show()
  image = img_to_array(image)
  image = np.reshape(image,[1,224,224,3])
  pred_1 = fruit_identification.predict(image)
  apple  = round(pred_1[0][0])
  banana = round(pred_1[0][1])
  orange = round(pred_1[0][2])
  if apple == 1:
    pred_2 = raw_or_ripe_apple.predict(image)
    raw_apple  = round(pred_2[0][0])
    ripe_apple = round(pred_2[0][1])
    if raw_apple == 1:
      prediction = 'This is a raw apple and it will take some days to ripe.'
    elif ripe_apple == 1:
      pred_3 = fresh_or_diseased_apple.predict(image)
      fresh_apple  = round(pred_3[0][1])
      diseased_apple = round(pred_3[0][0])
      if fresh_apple == 1:
        prediction = "This is an fresh apple. Healthy to eat!!"
      elif diseased_apple == 1:
        prediction = "This is an diseased apple. Not healthy to eat!!"
  elif banana == 1:
    pred_2 = raw_or_ripe_banana.predict(image)
    raw_banana = round(pred_2[0][0])
    ripe_banana = round(pred_2[0][1])
    if raw_banana ==1:
      prediction = 'This is a raw banana and it will take some days to ripe.'
    elif ripe_banana == 1:
      pred_3 = fresh_or_diseased_banana(image)
      fresh_banana = round(pred_3[0][1])
      diseased_banana = round(pred_3[0][0])
      if fresh_banana == 1:
        prediction = "This is an fresh banana. Healthy to eat!!"
      elif diseased_banana == 1:
        prediction = "This is an diseased banana. Not healthy to eat!!"
  elif orange ==1:
    pred_2 = raw_or_ripe_orange.predict(image)
    raw_orange = round(pred_2[0][0])
    ripe_orange = round(pred_2[0][1])
    if raw_orange == 1:
      prediction = 'This is a raw orange and it will take some days to ripe.'
    elif ripe_orange == 1:
      pred_3 = fresh_or_diseased_orange(image)
      fresh_orange = round(pred_3[0][1])
      diseased_orange = round(pred_3[0][0])
      if fresh_orange == 1:
        prediction = "This is an fresh orange. Healthy to eat!!"
      elif diseased_orange == 1:
        prediction = "This is an diseased orange. Not healthy to eat!!"
  print(prediction)

from tensorflow.python.ops.numpy_ops import np_config
np_config.enable_numpy_behavior()

path = "/content/download-_2_.jpeg"
predict_fruit(path)

path = '/content/BI_Capstone_project/Fresh_or_Diseased/apples/test/rotated_by_15_Screen Shot 2018-06-08 at 5.01.01 PM.png'
predict_fruit(path)

path = "/content/BI_Capstone_project/Raw_or_Ripe/apples/test/rotated_by_15_Screen Shot 2018-06-08 at 5.03.47 PM.png"
predict_fruit(path)

path = "/content/BI_Capstone_project/Fresh_or_Diseased/apples/diseased_apple/rotated_by_15_Screen Shot 2018-06-07 at 3.05.13 PM.png"
predict_fruit(path)

path = "/content/BI_Capstone_project/Fruits/test/rotated_by_15_Screen Shot 2018-06-12 at 9.38.10 PM.png"
predict_fruit(path)

path = "/content/BI_Capstone_project/Raw_or_Ripe/bananas/raw_banana/download (12).jpg"
predict_fruit(path)

path = "/content/BI_Capstone_project/Fresh_or_Diseased/bananas/diseased_banana/rotated_by_15_Screen Shot 2018-06-12 at 8.53.29 PM.png"
predict_fruit(path)

path = "/content/BI_Capstone_project/Fruits/test/rotated_by_15_Screen Shot 2018-06-12 at 11.50.14 PM.png"
predict_fruit(path)

path = "/content/BI_Capstone_project/Raw_or_Ripe/oranges/raw_orange/download (14) - Copy.jpg"
predict_fruit(path)

path = "/content/BI_Capstone_project/Fresh_or_Diseased/oranges/test/rotated_by_15_Screen Shot 2018-06-12 at 11.18.46 PM.png"
predict_fruit(path)







